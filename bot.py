from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import smtplib
from email.mime.text import MIMEText
import os

TOKEN = "7713823915:AAHSvUOlvYtCoszYItEE3-pZNKjGackKw9Q"
ORGANIZERS_EMAIL = "kserandr@gmail.com"
EMAIL_PASSWORD = "your_email_password"
SMTP_SERVER = "smtp.example.com"
SMTP_PORT = 587

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ"))
keyboard.add(KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True))
keyboard.add(KeyboardButton("üö® –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å"))

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º
def send_email(subject, message):
    try:
        msg = MIMEText(message)
        msg["Subject"] = subject
        msg["From"] = ORGANIZERS_EMAIL
        msg["To"] = ORGANIZERS_EMAIL
        
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(ORGANIZERS_EMAIL, EMAIL_PASSWORD)
        server.sendmail(ORGANIZERS_EMAIL, ORGANIZERS_EMAIL, msg.as_string())
        server.quit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤ –Ω–∞ –ë–£–¢. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
@dp.message_handler(lambda message: message.text == "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ")
async def send_info(message: types.Message):
    info_text = "–ë–æ–ª—å—à–∞—è –£—Ä–∞–ª—å—Å–∫–∞—è –¢—Ä–æ–ø–∞ ‚Äì —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –ª—É—á—à–∏–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –£—Ä–∞–ª–∞..."
    await message.answer(info_text)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@dp.message_handler(content_types=['location'])
async def location_handler(message: types.Message):
    if message.location:
        lat, lon = message.location.latitude, message.location.longitude
        email_message = f"–¢—É—Ä–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {lat}, {lon}"
        send_email("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–∞", email_message)
        await message.answer("–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º.")

# –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å
@dp.message_handler(lambda message: message.text == "üö® –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å")
async def emergency_handler(message: types.Message):
    send_email("–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å", f"–¢—É—Ä–∏—Å—Ç {message.from_user.full_name} ({message.from_user.id}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–º–æ—â—å!")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º! –û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
